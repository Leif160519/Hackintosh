#!/bin/sh
printf '\033[8;60;165t'
clear

#
# This script is refer to Pike R. Alpha's work as follow, also thanks to Pike R. Alpha.       by crazybirdy. v5.20180605
#

########################################################################################################################
# https://github.com/Piker-Alpha/HandyScripts/blob/master/installScriptTemplate.sh                                     #
# Bash script to download macOS High Sierra installation packages from sucatalog.gz and build the installer.pkg for it.#
# version 2.1 - Copyright (c) 2017 by Pike R. Alpha (PikeRAlpha@yahoo.com)                                             #
########################################################################################################################

#
# Bash script to download macOS High Sierra installation packages from sucatalog.gz and build the installer.pkg for it.
#
# version 2.1 - Copyright (c) 2017 by Pike R. Alpha (PikeRAlpha@yahoo.com)
#
# Updates:
#
#       - Creates a seedEnrollement.plist when missing.
#       - Volume picker for seedEnrollement.plist added.
#       - Added sudo to 'open installer.pkg' to remedy authorisation problems.
#       - Fix for volume names with a space in it. Thanks to:
#       - https://pikeralpha.wordpress.com/2017/06/22/script-to-upgrade-macos-high-sierra-dp1-to-dp2/#comment-10216)
#       - Add file checks so that we only download the missing files.
#       - Polished up comments.
#       - Changed key, salt, target files and version (now v1.5).
#       - Now calling the installer.app with -pkg -target instead of open to prevent failures.
#       - Fixed path to distribution file.
#       - Checks for missing files added.
#       - Updated version number (now v1.6).
#       - Removing unused (initialisation of a) variable.
#       - Improved verbose output.
#       - Updated version number (now v1.7).
#       - Fix installer breakage.
#       - Updated version number (now v1.8).
#       - Opt out for firmware added.
#       - Changed version number (now v1.9).
#       - Opt in/out for APFS conversion added.
#       - Changed version number (now v2.0).
#       - Variables 'version' and 'salt' added.
#       - Checks for newly added variables added.
#       - Changed version number (now v2.1).
#

# CatalogURL for Developer Program Members
# https://swscan.apple.com/content/catalogs/others/index-10.13seed-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz
#
# CatalogURL for Beta Program Members
# https://swscan.apple.com/content/catalogs/others/index-10.13beta-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz
#
# CatalogURL for Regular Software Updates
# https://swscan.apple.com/content/catalogs/others/index-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz
#
# CatalogURL for Customer Seed Updates
# https://swscan.apple.com/content/catalogs/others/index-10.13customerseed-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz

#
# Tip: In case you run into the ERROR_7E7AEE96CA error then you need to change the ProductVersion and 
# in /System/Library/CoreServices/SystemVersion.plist to 10.13
#

#
# http://telegra.ph/Download-macOS-Mojave-Beta-2-wo-Accessing-Mac-App-Store-06-24
#

printred() {
  printf "\e[1;31m${1}\e[0m"
}
printgreen() {
  printf "\e[1;32m${1}\e[0m"
}
printyellow() {
  printf "\e[1;33m${1}\e[0m"
}
printblue() {
  printf "\e[1;34m${1}\e[0m"
}
printpurple() {
  printf "\e[1;35m${1}\e[0m"
}
printLatest() {
  printf "\e[1;31m${1}\e[0m"
}

echo 
printf "从 swscan.apple.com 下载完整安装app.    Download the full installer app from swscan.apple.com.\n"
echo 

# CatalogURL for Regular Software Updates
CatalogURLRegular="https://swscan.apple.com/content/catalogs/others/index-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz"
# CatalogURL for Public Beta Program Members
CatalogURLPublic="https://swscan.apple.com/content/catalogs/others/index-10.14beta-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz"
# CatalogURL for Developer Beta Program Members
CatalogURLDeveloper="https://swscan.apple.com/content/catalogs/others/index-10.14seed-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog.gz"

echo
printred "1.选用 正式版 下载渠道。\n"
printred "1.Use CatalogURL for Regular Software Updates\n"
echo "  ${CatalogURLRegular}"
echo
printred "2.选用 公開测试版 下载渠道。\n"
printred "2.Use CatalogURL for Public Beta Program Members\n"
echo "  ${CatalogURLPublic}"
echo
printred "3.选用 开发者测试版 下载渠道。\n"
printred "3.Use CatalogURL for Developer Beta Program Members\n"
echo "  ${CatalogURLDeveloper}"
echo
read -p "请选择 要下载的 版本  Select the CatalogURL ( 1 / 2 / 3 ) : " macOSver

case $macOSver in
  1)
    # CatalogURL for Regular Software Updates
    CatalogURL="${CatalogURLRegular}"
    CatalogURLver="正式版 下载渠道 Regular Software Updates"
  ;;
  2)
    # CatalogURL for Developer Beta Program Members
    CatalogURL="${CatalogURLPublic}"
    CatalogURLver="公開测试版 下载渠道 Public Beta Updates"
  ;;
  3)
    # CatalogURL for Developer Beta Program Members
    CatalogURL="${CatalogURLDeveloper}"
    CatalogURLver="开发者测试版 下载渠道 Developer Beta Updates"
  ;;
  *)
    # CatalogURL for Regular Software Updates
    CatalogURL="${CatalogURLRegular}"
    CatalogURLver="正式版 下载渠道 Regular Software Updates"
  ;;
esac

echo
printf "选用版本  The selected CatalogURL:  \e[1;32m$CatalogURLver\e[0m\n"
echo "  ${CatalogURL}"
echo
echo
echo "正在搜寻更新，请耐心等候！ Searching for updates from catalogs of swscan.apple.com. Be patient!"
echo 

cd /tmp
rm -f fullapp-catalogs
rm -f fullapp-catalogs.gz
axel -a -n 10 ${CatalogURL} -o fullapp-catalogs.gz 2>/dev/null

found404=`cat fullapp-catalogs.gz | grep Not | grep Found `
if [[ ! $found404 == "" ]]; then
    printf "  未找到  Not found the CatalogURL: \e[1;32m$CatalogURLver\e[0m\n"
    echo
    exit
fi

gunzip fullapp-catalogs.gz

macOSdmgAll[0]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==1 `
macOSdmgAll[1]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==2 `
macOSdmgAll[2]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==3 `
macOSdmgAll[3]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==4 `
macOSdmgAll[4]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==5 `
macOSdmgAll[5]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==6 `
macOSdmgAll[6]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==7 `
macOSdmgAll[7]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==8 `
macOSdmgAll[8]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==9 `
macOSdmgAll[9]=`cat /tmp/fullapp-catalogs | grep BaseSystem.dmg | grep -v integrityData | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' | awk NR==10 `

macOSdmg=($(echo "${macOSdmgAll[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

index=0
for macOSdmglist in "${macOSdmg[@]}"
do
  if [ ! $macOSdmglist == "" ]; then

    macOSUpdver[$index]=`echo $macOSdmglist | sed 's/\// /g' | awk '{print $9;}' | sed 's/macOSUpd//' | sed 's/.pkg//' `

    macOSUpdversion1[$index]=`echo $macOSdmglist | sed 's/\// /g' | awk '{print $5;}' `
    macOSUpdversion2[$index]=`echo $macOSdmglist | sed 's/\// /g' | awk '{print $6;}' `
    macOSUpdversion[$index]="${macOSUpdversion1[$index]}/${macOSUpdversion2[$index]}"
    macOSUpdkey[$index]=`echo $macOSdmglist | sed 's/\// /g' | awk '{print $7;}' `
    macOSUpdsalt[$index]=`echo $macOSdmglist | sed 's/\// /g' | awk '{print $8;}' `

    url="https://swdist.apple.com/content/downloads/${macOSUpdversion[$index]}/${macOSUpdkey[$index]}/${macOSUpdsalt[$index]}/"
    distribution="${macOSUpdkey[$index]}.English.dist"
    rm -f *dist
    axel -a -n 10 $url$distribution -o ${macOSUpdkey[$index]}.English.dist 2>/dev/null
    macOSupdateosver[$index]=`cat ${macOSUpdkey[$index]}.English.dist | grep InstallAssistantAuto | grep version | awk '{print $4;}' | sed 's/version="//' | sed 's/.\{7\}/& /g' | awk '{print $1;}' `
    macOSupdatebeta[$index]=`cat ${macOSUpdkey[$index]}.English.dist | grep SU_TITLE | grep strings | grep macOS | sed 's/<strings language="English">"SU_TITLE" = "//' | sed 's/";//' | sed 's/Install //' | sed 's/    //' | sed 's/    //' | sed 's/  //' `
    macOSupdatebuildver[$index]=`cat ${macOSUpdkey[$index]}.English.dist | grep -A1 BUILD | grep -A1 key | grep string | sed 's/<string>//' | sed 's/<\/string>//' | awk '{print $1;}' `

    rm -f *dist

    macOSupdatebuildver[$index]="${macOSupdateosver[$index]}.${macOSupdatebuildver[$index]}"

    BaseSystem[$index]=`cat /tmp/fullapp-catalogs | grep "${macOSUpdversion[$index]}" | grep "${macOSUpdkey[$index]}" | grep "${macOSUpdsalt[$index]}" | grep BaseSystem.dmg | grep -v integrityData | sed 's/.dmg//' | sed 's/<string>//' | sed 's/<\/string>//' | sed 's/\// /g' | awk '{print $9;}' `
    macOSuptime[$index]=`cat /tmp/fullapp-catalogs | grep -A 5 PostDate | grep -B 7 $url${macOSUpdkey[$index]} | grep \<date\>  | sed 's/<date>//' | sed 's/<\/date>//' | awk '{print $1;}' | sed 's/T/ /' | sed 's/Z//' | awk NR==1 `
    macOSupdate[$index]="${macOSuptime[$index]} .. ${macOSUpdkey[$index]} .. ${macOSupdatebuildver[$index]} ${macOSupdatebeta[$index]}"

    macOSlist[$index]=`echo ${macOSdmglist} `

    let index++
  fi
done

index=0
for list in "${macOSupdate[@]}"
do
  echo "${macOSlist[$index]}"
  let index++
done

indexupdatever=0
Latestupdatever=0
for updatever in "${macOSupdatebuildver[@]}"
do
  if [ $updatever \> $Latestupdatever ]; then
    Latestupdatever=${macOSupdatebuildver[$indexupdatever]}
    Latestupdatebeta=${macOSupdatebeta[$indexupdatever]}
  fi
  let indexupdatever++
done

echo
printf "最新版本 The latest version: \e[1;32m$Latestupdatever $Latestupdatebeta\e[0m\n"

echo
echo "可选择下载的版本 Available version to downlaod:"
echo

indexmenu=0
for updateselect in "${macOSupdate[@]}"
do
  if [ ${macOSupdatebuildver[$indexmenu]} == $Latestupdatever ]; then
    printLatest "[ $indexmenu ] ${updateselect}"
    echo
  else
    echo "[ $indexmenu ] ${updateselect}"
  fi
  checkdownloadver[$indexmenu]=$indexmenu
  let indexmenu++
done

echo
read -p "选择要下载的版本 Select one version to downlaod: " downloadver
if [ ! $downloadver ]; then
  echo
  echo "发生错误！！！                          Error!!!"
  echo
  echo "请选择正确下载的版本。                  Please select right version to downlaod."
  echo
  rm -f fullapp-catalogs
  exit 0
fi

checkfine=no
checkindex=0
for checkindex in "${checkdownloadver[@]}"
do
  if [ $downloadver == $checkindex ]; then
    checkfine=yes
  fi
  let checkindex++
done
if [ $checkfine == no ]; then
  echo
  echo "发生错误！！！                          Error!!!"
  echo
  echo "请选择正确下载的版本。                  Please select right version to downlaod."
  echo
  rm -f fullapp-catalogs
  exit 0
fi

updatever="${macOSUpdver[$downloadver]}"
version="${macOSUpdversion[$downloadver]}"
key="${macOSUpdkey[$downloadver]}"
salt="${macOSUpdsalt[$downloadver]}"
echo "                                               [ $downloadver ] ${macOSupdate[$downloadver]}"

distribution=`cat /tmp/fullapp-catalogs | grep "${version}" | grep "${key}" | grep "${salt}" | grep English | sed 's/<string>//' | sed 's/<\/string>//' | sed 's/\// /g' | awk '{print $9;}' `

  targetFiles[0]=`cat /tmp/fullapp-catalogs | grep "${version}" | grep "${key}" | grep "${salt}" | grep -v integrityData | grep InstallAssistantAuto.pkg | sed 's/<string>//' | sed 's/<\/string>//' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `
  targetFiles[1]=`cat /tmp/fullapp-catalogs | grep "${version}" | grep "${key}" | grep "${salt}" | grep -v integrityData | grep AppleDiagnostics.chunklist | sed 's/<string>//' | sed 's/<\/string>//' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `
  targetFiles[2]=`cat /tmp/fullapp-catalogs | grep "${version}" | grep "${key}" | grep "${salt}" | grep -v integrityData | grep AppleDiagnostics.dmg | sed 's/<string>//' | sed 's/<\/string>//' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `
  targetFiles[3]=`cat /tmp/fullapp-catalogs | grep "${version}" | grep "${key}" | grep "${salt}" | grep -v integrityData | grep BaseSystem.chunklist | sed 's/<string>//' | sed 's/<\/string>//' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `
  targetFiles[4]=`cat /tmp/fullapp-catalogs | grep "${version}" | grep "${key}" | grep "${salt}" | grep -v integrityData | grep BaseSystem.dmg | sed 's/<string>//' | sed 's/<\/string>//' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `
  targetFiles[5]=`cat /tmp/fullapp-catalogs | grep "${version}" | grep "${key}" | grep "${salt}" | grep -v integrityData | grep InstallESDDmg.pkg | sed 's/<string>//' | sed 's/<\/string>//' | sed 's/\// /g' | awk '{print $9;}' | awk NR==1 `

rm -f fullapp-catalogs
cd

#
# Initialisation of a variable (our target folder).
#
tmpDirectory="/tmp"

#
# URL copied from sucatalog.gz (think CatalogURL).
#
url="https://swdist.apple.com/content/downloads/${version}/${key}/${salt}/"

#
# Target distribution language.
#
distribution="${key}.English.dist"

#
# Check target directory.
#
if [ -d "${tmpDirectory}/${key}" ]; then
  rm -rf "${tmpDirectory}/${key}"
  mkdir "${tmpDirectory}/${key}"
fi
if [ ! -d "${tmpDirectory}/${key}" ]; then
  mkdir "${tmpDirectory}/${key}"
fi
open "${tmpDirectory}/${key}"

echo 
echo "准备进行下载。Prepare to download the files. [ $downloadver ] ${macOSupdate[$downloadver]}."
echo 
echo "${url}${distribution}"
for filename in "${targetFiles[@]}"
do
  if [ ! $filename == "" ]; then
    echo "${url}$filename"
  fi
done
echo

printred "如果你已经发生下载错误，可以 预先手动下载 上列网址文件，并将文件放入 以下 正确的文件夹 即可继续进行。\n"
printred "If get errors of downloading before, you can download files as above URL manually and put into correct folder as below before continuing.\n"
echo

echo "${tmpDirectory}/${key}/${distribution}"
for filename in "${targetFiles[@]}"
do
  if [ ! $filename == "" ]; then
    echo "${tmpDirectory}/${key}/$filename"
  fi
done
if [ ! $partitiontype == "FDisk_partition_scheme" ]; then
  echo "${tmpDirectory}/${key}/${RecoverHDPackage}"
fi
echo

read -p "手动下载放入上列文件，或由脚本自动下载文件，继续进行？   Put files as above manually or download files automatically, continue? (y/n) " downloadyesno
case "$downloadyesno" in
  y|Y)
    echo
  ;;
  *)
    echo
    echo "停止进行下载！！！               Stop downloading!!!"
    echo
    exit 0
  ;;
esac

#
# Download distribution file.
#
if [ ! -e "${tmpDirectory}/${key}/${distribution}" ]; then
  echo "Downloading: ${distribution} ..."
  axel -a -n 64 "${url}${distribution}" -o "${tmpDirectory}/${key}/${distribution}"
  #
  # Remove root only restriction/allow us to install on any target volume.
  #
  cat "${tmpDirectory}/${key}/${distribution}" | sed -e 's|rootVolumeOnly="true"|allow-external-scripts="true"|' > "${tmpDirectory}/${key}/new.dist"

  if [ -e "${tmpDirectory}/${key}/new.dist" ]; then
    mv "${tmpDirectory}/${key}/new.dist" "${tmpDirectory}/${key}/${distribution}"
  fi
else
  echo "File: ${distribution} already there, skipping this download."
fi

#
# Change to working directory (otherwise it will fail to locate the packages).
#
cd "${tmpDirectory}/${key}"

#
# Download target files.
#
for filename in "${targetFiles[@]}"
do
  if [ ! $filename == "" ]; then
    if [ ! -e "${tmpDirectory}/${key}/${filename}" ]; then
      echo "Downloading: ${filename} ..."
      axel -a -n 64 "${url}${filename}" -o "${tmpDirectory}/${key}/${filename}"
    else
      echo "File: ${filename} already there, skipping this download."
    fi
  fi
done

username=`whoami`
pkgutil --expand-full InstallAssistantAuto.pkg Installapp

cd "${tmpDirectory}/${key}/Installapp/Payload/"
fullappnames=(*)

echo
echo "找到 Found ...... ${fullappnames}"
echo

for appname in "${fullappnames[@]}"
do
      if [ -e "${tmpDirectory}/${key}/Installapp/Payload/${appname}/Contents/SharedSupport/" ]; then
        mv "${tmpDirectory}/${key}/AppleDiagnostics.chunklist" "${tmpDirectory}/${key}/Installapp/Payload/${appname}/Contents/SharedSupport/"
        mv "${tmpDirectory}/${key}/AppleDiagnostics.dmg" "${tmpDirectory}/${key}/Installapp/Payload/${appname}/Contents/SharedSupport/"
        mv "${tmpDirectory}/${key}/BaseSystem.chunklist" "${tmpDirectory}/${key}/Installapp/Payload/${appname}/Contents/SharedSupport/"
        mv "${tmpDirectory}/${key}/BaseSystem.dmg" "${tmpDirectory}/${key}/Installapp/Payload/${appname}/Contents/SharedSupport/"
        mv "${tmpDirectory}/${key}/InstallESDDmg.pkg" "${tmpDirectory}/${key}/Installapp/Payload/${appname}/Contents/SharedSupport/InstallESD.dmg"
        rm -rf "/Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}"
        mkdir -p "/Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}"
        mv "${tmpDirectory}/${key}/Installapp/Payload/${appname}" "/Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}/"
        newappname="${appname}"
      fi
done

echo "/Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}/"
ls -la "/Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}/"
echo
echo "/Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}/${newappname}/Contents/SharedSupport/"
ls -la "/Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}/${newappname}/Contents/SharedSupport/"
open "/Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}/"

echo
echo "完整安装app 存放在 /Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}/"
echo "The full installer app is located on /Users/${username}/Desktop/App-${macOSupdatebuildver[$downloadver]}/"
echo
printf "\e[1;34mMake sure you get the full installer without any errors during the downloading process.\e[0m\n"
printf "\e[1;34m1.check the received sizes of each file, make sure they’re all 100 downloaded.\e[0m\n"
printf "\e[1;34m2.if any one of the files \e[0m\e[1;31mgets error\e[0m\e[1;34m during the downloading process,\e[0m\n"
printf "\e[1;34m  and\e[0m \e[1;31mdidn’t get 100 downloaded,\e[0m\e[1;34m you\e[0m \e[1;31mneed to re-download the full installer app again.\e[0m\n"
echo
exit 0
